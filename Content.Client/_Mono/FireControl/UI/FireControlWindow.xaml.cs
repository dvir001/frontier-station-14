using Content.Client.UserInterface.Controls;
using Content.Shared._Mono.FireControl;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.XAML;
using Robust.Client.UserInterface.Controls;

namespace Content.Client._Mono.FireControl.UI;

[GenerateTypedNameReferences]
public sealed partial class FireControlWindow : FancyWindow
{
    public FireControlNavControl Radar => NavRadar;
    public Action? OnServerRefresh;

    public readonly Dictionary<NetEntity, Button> WeaponsList = new();

    public FireControlWindow()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
        RefreshButton.OnPressed += _ => OnServerRefresh?.Invoke();
        SelectAllButton.OnPressed += SelectAllWeapons;
        UnselectAllButton.OnPressed += UnselectAllWeapons;
    }

    private void SelectAllWeapons(BaseButton.ButtonEventArgs args)
    {
        foreach (var button in WeaponsList.Values)
        {
            button.Pressed = true;
        }
    }

    private void UnselectAllWeapons(BaseButton.ButtonEventArgs args)
    {
        foreach (var button in WeaponsList.Values)
        {
            button.Pressed = false;
        }
    }

    public void UpdateStatus(FireControlConsoleBoundInterfaceState state)
    {
        NavRadar.UpdateState(state.NavState);

        if (state.Connected)
        {
            ServerStatus.Text = Loc.GetString("gunnery-window-connected");
            ServerStatus.FontColorOverride = Color.Green;
        }
        else
        {
            RefreshButton.Disabled = false;
            ServerStatus.Text = Loc.GetString("gunnery-window-disconnected");
            ServerStatus.FontColorOverride = Color.Red;

            WeaponsList.Clear();
            ControllablesBox.DisposeAllChildren();
            return;
        }

        var toRemove = new HashSet<NetEntity>(WeaponsList.Keys);

        foreach (var controllable in state.FireControllables)
        {
            if (WeaponsList.TryGetValue(controllable.NetEntity, out var existingButton))
            {
                toRemove.Remove(controllable.NetEntity);
            }
            else
            {
                var button = new Button
                {
                    ToggleMode = true,
                    Text = controllable.Name,
                    StyleClasses = { "ButtonSquare OpenRight" },
                    HorizontalExpand = true,
                    Margin = new Thickness(4, 1)
                };

                ControllablesBox.AddChild(button);
                WeaponsList.Add(controllable.NetEntity, button);
            }
        }

        foreach (var entity in toRemove)
        {
            if (WeaponsList.TryGetValue(entity, out var button))
            {
                ControllablesBox.RemoveChild(button);
                WeaponsList.Remove(entity);
            }
        }

        SelectAllButton.Disabled = WeaponsList.Count == 0;
        UnselectAllButton.Disabled = WeaponsList.Count == 0;
    }
}
